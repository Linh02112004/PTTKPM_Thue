let previousData = {
    name: document.getElementById('name').value,
    employeeId: document.getElementById('employee-id').value,
    hometown: document.getElementById('hometown').value,
    address: document.getElementById('address').value,
    phone: document.getElementById('phone').value,
    birthdate: document.getElementById('birthdate').value,
    dependents: document.getElementById('dependents').value,
    gender: document.querySelector('input[name="gender"]:checked') ? document.querySelector('input[name="gender"]:checked').value : ''
  };
  
  function setActiveButton(button) {
    const buttons = document.querySelectorAll('.button');
    buttons.forEach(btn => {
      btn.classList.remove('active');
    });
    button.classList.add('active');
  }
  
  function showNotification() {
    document.getElementById('notification').style.display = 'block';
  }
  
  function updateInfo() {
    previousData = {
      name: document.getElementById('name').value,
      employeeId: document.getElementById('employee-id').value,
      hometown: document.getElementById('hometown').value,
      address: document.getElementById('address').value,
      phone: document.getElementById('phone').value,
      birthdate: document.getElementById('birthdate').value,
      dependents: document.getElementById('dependents').value,
      gender: document.querySelector('input[name="gender"]:checked') ? document.querySelector('input[name="gender"]:checked').value : ''
    };
    document.getElementById('notification').style.display = 'none';
  }
  
  function cancelUpdate() {
    document.getElementById('name').value = previousData.name;
    document.getElementById('employee-id').value = previousData.employeeId;
    document.getElementById('hometown').value = previousData.hometown;
    document.getElementById('address').value = previousData.address;
    document.getElementById('phone').value = previousData.phone;
    document.getElementById('birthdate').value = previousData.birthdate;
    document.getElementById('dependents').value = previousData.dependents;
  
    let genderInputs = document.querySelectorAll('input[name="gender"]');
    genderInputs.forEach(input => {
      input.checked = (input.value === previousData.gender);
    });
  
    document.getElementById('notification').style.display = 'none';
  }
  
  function updatePhoto() {
    document.getElementById('photo-upload').click();
  }
  
  function loadPhoto(event) {
    const profilePic = document.getElementById('profile-pic');
    profilePic.style.backgroundImage = `url(${URL.createObjectURL(event.target.files[0])})`;
  }

  function setActiveButton(button) {
    const buttons = document.querySelectorAll('.button');
    buttons.forEach(btn => {
      btn.classList.remove('active');
    });
    button.classList.add('active');

    // Hi·ªÉn th·ªã ph·∫ßn t∆∞∆°ng ·ª©ng
    const infoSection = document.getElementById('info-section');
    const salarySection = document.getElementById('salary-section');

    if (button.innerText === "Nh·∫≠p th√¥ng tin") {
      infoSection.style.display = 'block';
      salarySection.style.display = 'none';
    } else if (button.innerText === "Xem l∆∞∆°ng v√† thu·∫ø c√° nh√¢n") {
      infoSection.style.display = 'none';
      salarySection.style.display = 'block';
    } else {
      infoSection.style.display = 'none';
      salarySection.style.display = 'none';
    }
  }

  function searchSalary() {
    const year = parseInt(document.getElementById('search-year').value);
    const currentYear = new Date().getFullYear();
    const currentMonth = new Date().getMonth() + 1; // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0

    const tableBody = document.querySelector('#salary-table tbody');
    tableBody.innerHTML = ''; // X√≥a c√°c h√†ng hi·ªán t·∫°i

    if (year < currentYear) {
      // Hi·ªÉn th·ªã to√†n b·ªô 12 th√°ng
      for (let month = 1; month <= 12; month++) {
        const row = `<tr>
                      <td>${month}</td>
                      <td></td>
                      <td></td>
                      <td></td>
                      <td></td>
                      <td><span class="eye-icon" onclick="showDetail(${month})">üëÅÔ∏è</span></td>
                    </tr>`;
        tableBody.insertAdjacentHTML('beforeend', row);
      }
    } else if (year === currentYear) {
      // Hi·ªÉn th·ªã ƒë·∫øn th√°ng hi·ªán t·∫°i
      for (let month = 1; month <= currentMonth; month++) {
        const row = `<tr>
                      <td>${month}</td>
                      <td></td>
                      <td></td>
                      <td></td>
                      <td></td>
                      <td><span class="eye-icon" onclick="showDetail(${month})">üëÅÔ∏è</span></td>
                    </tr>`;
        tableBody.insertAdjacentHTML('beforeend', row);
      }
    }

    document.getElementById('salary-table').style.display = 'table';
  }

  function showDetail(month) {
    // Hi·ªÉn th·ªã chi ti·∫øt l∆∞∆°ng cho th√°ng ƒë√£ ch·ªçn
    const detailTableBody = document.getElementById('detail-table-body');
    detailTableBody.innerHTML = ''; 

    // Kh·ªüi t·∫°o c√°c bi·∫øn v·ªõi gi√° tr·ªã tr·ªëng
    const employeeName = ""; // Tr·ªëng
    const salary = ""; // Tr·ªëng
    const deductions = ""; // Tr·ªëng
    const taxDue = ""; // Tr·ªëng

    const row = `<tr>
                  <td>${month}</td>
                  <td>${employeeName}</td>
                  <td>${salary}</td>
                  <td>${deductions}</td>
                  <td>${taxDue}</td>
                </tr>`;
    detailTableBody.insertAdjacentHTML('beforeend', row);

    document.getElementById('detail-modal').classList.add('active');
}

  function closeDetailModal() {
    document.getElementById('detail-modal').classList.remove('active');
  }

  function calculateTaxYear() {
    // L·∫•y nƒÉm t·ª´ tr∆∞·ªùng t√¨m ki·∫øm
    const year = document.getElementById('search-year').value;
    const employeeId = document.getElementById('employee-id').value;

    // C·∫≠p nh·∫≠t th√¥ng tin v√†o modal
    document.getElementById('taxYear').textContent = year; // Hi·ªÉn th·ªã nƒÉm ƒë√£ t√¨m ki·∫øm
    document.getElementById('employeeId').textContent = '';
    document.getElementById('taxCode').textContent = ''; 
    document.getElementById('fullName').textContent = ''; 
    document.getElementById('taxDue').textContent = ''; 
    document.getElementById('taxPaid').textContent = ''; 
    document.getElementById('taxRefund').textContent = ''; 

    document.getElementById('modal').classList.add('active');
  }

  function setActiveButton(button) {
    const sections = ['info-section', 'salary-section', 'tax-section'];
    sections.forEach(section => {
      document.getElementById(section).style.display = 'none';
    });
    const activeSection = button.textContent === 'Nh·∫≠p th√¥ng tin' ? 'info-section' :
                          button.textContent === 'Xem l∆∞∆°ng v√† thu·∫ø c√° nh√¢n' ? 'salary-section' :
                          'tax-section';
    document.getElementById(activeSection).style.display = 'block';
    
    const buttons = document.querySelectorAll('.button');
    buttons.forEach(btn => btn.classList.remove('active'));
    button.classList.add('active');
  }

  function closeModal() {
    document.getElementById('modal').classList.remove('active');
  }

  function calculateTax() {
    const salary = parseFloat(document.getElementById('salary').value) || 0;
    const dependent = parseFloat(document.getElementById('dependent').value) || 0;

    // Ki·ªÉm tra xem dependent c√≥ h·ª£p l·ªá kh√¥ng
    if (isNaN(dependent) || dependent < 0) {
        alert("S·ªë ph·ª• thu·ªôc kh√¥ng h·ª£p l·ªá.");
        return;
    }

    // T√≠nh to√°n c√°c kho·∫£n gi·∫£m tr·ª´ cho ph·ª• thu·ªôc
    const deductionsForDependents = 4400000 * dependent; 
    const tncn = salary - 11000000 - deductionsForDependents;

    let taxAmount = 0;
    let taxFormula = '';

    // T√≠nh thu·∫ø d·ª±a tr√™n thu nh·∫≠p ch·ªãu thu·∫ø
    if (tncn <= 0) {
        taxAmount = 0;
        taxFormula = "TNCN ph·∫£i ch·ªãu thu·∫ø <= 0, kh√¥ng c√≥ thu·∫ø ph·∫£i n·ªôp.";
    } else if (tncn <= 5000000) {
        taxAmount = tncn * 0.05;
        taxFormula = `S·ªë thu·∫ø ph·∫£i n·ªôp = 5% * ${tncn.toFixed(2)} = ${taxAmount.toFixed(2)} VND`;
    } else if (tncn <= 10000000) {
        taxAmount = tncn * 0.10 - 250000;
        taxFormula = `S·ªë thu·∫ø ph·∫£i n·ªôp = 10% * ${tncn.toFixed(2)} - 250,000 = ${taxAmount.toFixed(2)} VND`;
    } else if (tncn <= 18000000) {
        taxAmount = tncn * 0.15 - 750000;
        taxFormula = `S·ªë thu·∫ø ph·∫£i n·ªôp = 15% * ${tncn.toFixed(2)} - 750,000 = ${taxAmount.toFixed(2)} VND`;
    } else if (tncn <= 32000000) {
        taxAmount = tncn * 0.20 - 1650000;
        taxFormula = `S·ªë thu·∫ø ph·∫£i n·ªôp = 20% * ${tncn.toFixed(2)} - 1,650,000 = ${taxAmount.toFixed(2)} VND`;
    } else if (tncn <= 52000000) {
        taxAmount = tncn * 0.25 - 3250000;
        taxFormula = `S·ªë thu·∫ø ph·∫£i n·ªôp = 25% * ${tncn.toFixed(2)} - 3,250,000 = ${taxAmount.toFixed(2)} VND`;
    } else if (tncn <= 80000000) {
        taxAmount = tncn * 0.30 - 5850000;
        taxFormula = `S·ªë thu·∫ø ph·∫£i n·ªôp = 30% * ${tncn.toFixed(2)} - 5,850,000 = ${taxAmount.toFixed(2)} VND`;
    } else {
        taxAmount = tncn * 0.35 - 9850000;
        taxFormula = `S·ªë thu·∫ø ph·∫£i n·ªôp = 35% * ${tncn.toFixed(2)} - 9,850,000 = ${taxAmount.toFixed(2)} VND`;
    }

    taxAmount = Math.max(taxAmount, 0);

    // C·∫≠p nh·∫≠t k·∫øt qu·∫£
    document.getElementById('tax-amount').textContent = taxAmount.toFixed(2) + " VND";
    document.getElementById('tax-amount-words').textContent = convertNumberToWords(taxAmount) + " ƒë·ªìng";

    document.getElementById('tax-details').innerHTML = 
        `TNCN ph·∫£i ch·ªãu thu·∫ø = ${salary} - 11,000,000 - (4,400,000 * ${dependent}) = ${tncn.toFixed(2)} VND <br>` +
        taxFormula;

    document.getElementById('tax-result').style.display = 'block';
  }

  function convertNumberToWords(num) {
    if (num === 0) return "Kh√¥ng";

    // T√°ch ph·∫ßn nguy√™n v√† ph·∫ßn l·∫ª
    const [integerPart, decimalPart] = num.toFixed(2).toString().split(".");
    const integerWords = convertIntegerToWords(parseInt(integerPart));

    let words = integerWords;

    // X·ª≠ l√Ω ph·∫ßn l·∫ª (n·∫øu c√≥)
    if (decimalPart && parseInt(decimalPart) > 0) { // Ch·ªâ x·ª≠ l√Ω n·∫øu ph·∫ßn l·∫ª > 0
        const decimalNumber = parseInt(decimalPart); // Chuy·ªÉn ph·∫ßn l·∫ª th√†nh s·ªë nguy√™n
        const decimalWords = convertChunkToWords(decimalNumber); // ƒê·ªçc ph·∫ßn l·∫ª nh∆∞ s·ªë nguy√™n

        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ph·∫ßn l·∫ª b·∫Øt ƒë·∫ßu b·∫±ng 0 (v√≠ d·ª• 0.04 s·∫Ω ƒë·ªçc l√† ph·∫©y kh√¥ng b·∫£y ƒë·ªìng)
        if (decimalPart[0] === "0") {
            words += ` ph·∫©y kh√¥ng ${decimalWords}`;
        } else {
            words += ` ph·∫©y ${decimalWords}`;
        }
    }

    return words.trim();
}

// H√†m chuy·ªÉn ƒë·ªïi ph·∫ßn nguy√™n
function convertIntegerToWords(num) {
    if (num === 0) return "Kh√¥ng";

    const units = ["", "m·ªôt", "hai", "ba", "b·ªën", "nƒÉm", "s√°u", "b·∫£y", "t√°m", "ch√≠n"];
    const scales = ["", "ngh√¨n", "tri·ªáu", "t·ª∑"];
    const chunks = [];
    let scaleIndex = 0;

    while (num > 0) {
        const chunk = num % 1000;
        if (chunk > 0 || chunks.length > 0) {
            chunks.push(convertChunkToWords(chunk) + (scales[scaleIndex] ? " " + scales[scaleIndex] : ""));
        }
        num = Math.floor(num / 1000);
        scaleIndex++;
    }

    return chunks.reverse().join(" ").trim();
}

// H√†m chuy·ªÉn ƒë·ªïi ch·ªØ s·ªë ƒë∆°n l·∫ª
function convertDigitToWord(digit) {
    const units = ["kh√¥ng", "m·ªôt", "hai", "ba", "b·ªën", "nƒÉm", "s√°u", "b·∫£y", "t√°m", "ch√≠n"];
    return units[digit];
}

// H√†m chuy·ªÉn ƒë·ªïi ph·∫ßn nguy√™n nh·ªè (h√†ng trƒÉm, ch·ª•c, ƒë∆°n v·ªã)
function convertChunkToWords(chunk) {
    const units = ["", "m·ªôt", "hai", "ba", "b·ªën", "nƒÉm", "s√°u", "b·∫£y", "t√°m", "ch√≠n"];
    const tens = ["", "m∆∞·ªùi", "hai m∆∞∆°i", "ba m∆∞∆°i", "b·ªën m∆∞∆°i", "nƒÉm m∆∞∆°i", "s√°u m∆∞∆°i", "b·∫£y m∆∞∆°i", "t√°m m∆∞∆°i", "ch√≠n m∆∞∆°i"];
    const hundreds = ["", "m·ªôt trƒÉm", "hai trƒÉm", "ba trƒÉm", "b·ªën trƒÉm", "nƒÉm trƒÉm", "s√°u trƒÉm", "b·∫£y trƒÉm", "t√°m trƒÉm", "ch√≠n trƒÉm"];

    const hundred = Math.floor(chunk / 100);
    const ten = Math.floor((chunk % 100) / 10);
    const unit = chunk % 10;

    let words = "";

    // X·ª≠ l√Ω h√†ng trƒÉm
    if (hundred > 0) {
        words += hundreds[hundred] + " ";
    }

    // X·ª≠ l√Ω h√†ng ch·ª•c v√† ƒë∆°n v·ªã
    if (ten > 1) {
        words += tens[ten] + " ";
        if (unit > 0) {
            words += units[unit] + " ";
        }
    } else if (ten === 1) {
        words += tens[ten] + " ";
        if (unit > 0) {
            words += units[unit] + " ";
        }
    } else if (unit > 0) {
        if (hundred > 0) {
            words += "linh ";
        }
        words += units[unit] + " ";
    }

    return words.trim();
}